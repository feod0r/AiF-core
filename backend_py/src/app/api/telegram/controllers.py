import httpx
import asyncio
from typing import List, Optional
from datetime import datetime, timezone
from sqlalchemy.orm import Session
from sqlalchemy import func, desc
from fastapi import HTTPException, Depends
from ..auth.dependencies import get_current_user
from ...external.sqlalchemy.models import TelegramBot, NotificationHistory, User
from ...external.sqlalchemy.session import get_db
from .models import (
    TelegramBotCreate,
    TelegramBotUpdate,
    TelegramBot as TelegramBotModel,
    SendNotificationRequest,
    SendNotificationResponse,
    TestMessageRequest,
    NotificationHistory as NotificationHistoryModel,
    TelegramBotStats,
    NotificationStats,
)

# Telegram Bot API URL
TELEGRAM_API_URL = "https://api.telegram.org/bot{token}/sendMessage"


async def send_telegram_message(
    bot_token: str, chat_id: str, message: str, parse_mode: str = "HTML"
) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Bot API"""
    try:
        url = TELEGRAM_API_URL.format(token=bot_token)
        data = {"chat_id": chat_id, "text": message, "parse_mode": parse_mode}

        async with httpx.AsyncClient(timeout=10.0) as client:
            response = await client.post(url, json=data)
            return response.status_code == 200
    except Exception as e:
        print(f"Error sending Telegram message: {e}")
        return False


def format_notification_message(
    title: Optional[str], message: str, priority: str = "medium"
) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram"""
    priority_emoji = {"high": "üî¥", "medium": "üü°", "low": "üü¢"}

    priority_text = {"high": "–í–´–°–û–ö–ò–ô", "medium": "–°–†–ï–î–ù–ò–ô", "low": "–ù–ò–ó–ö–ò–ô"}

    formatted_message = ""

    if title:
        formatted_message += f"<b>{title}</b>\n\n"

    formatted_message += f"{priority_emoji.get(priority, 'üü°')} <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {priority_text.get(priority, '–°–†–ï–î–ù–ò–ô')}\n"
    formatted_message += (
        f"üìÖ <b>–î–∞—Ç–∞:</b> {datetime.now(timezone.utc).strftime('%d.%m.%Y %H:%M')}\n\n"
    )
    formatted_message += message

    return formatted_message


async def send_notification_system(
    db: Session,
    notification_type: str,
    message: str,
    title: Optional[str] = None,
    priority: str = "medium",
    created_by_id: int = 1,  # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
) -> dict:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–µ–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–¥–∞—á (–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫).
    """
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –≤ Python
    all_bots = db.query(TelegramBot).filter(TelegramBot.is_active == True).all()
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –±–æ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –¥–∞–Ω–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    bots = [
        bot for bot in all_bots
        if bot.notification_types and notification_type in bot.notification_types
    ]
    
    if not bots:
        return {
            "success": False,
            "sent_to": 0,
            "failed": 0,
            "message": f"No active bots found for notification type: {notification_type}",
        }
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    formatted_message = format_notification_message(
        title or "–°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", message, priority
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    sent_count = 0
    failed_count = 0
    details = []
    
    for bot in bots:
        try:
            success = await send_telegram_message(
                bot.bot_token, bot.chat_id, formatted_message
            )
            if success:
                sent_count += 1
            else:
                failed_count += 1
            
            details.append({
                "bot_id": bot.id,
                "bot_name": bot.name,
                "status": "success" if success else "failed",
            })
        except Exception as e:
            failed_count += 1
            details.append({
                "bot_id": bot.id,
                "bot_name": bot.name,
                "status": "failed",
                "error": str(e),
            })
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    bot_info = {
        "bot_ids": [bot.id for bot in bots],
        "bot_names": [bot.name for bot in bots],
        "details": details,
    }
    
    history = NotificationHistory(
        notification_type=notification_type,
        message=message,
        title=title,
        priority=priority,
        sent_to=sent_count,
        failed=failed_count,
        success=sent_count > 0,
        created_by=created_by_id,
        data=bot_info,
    )
    db.add(history)
    db.commit()
    
    return {
        "success": sent_count > 0,
        "sent_to": sent_count,
        "failed": failed_count,
        "details": details,
    }


class TelegramController:
    def __init__(self, db: Session, current_user: User):
        self.db = db
        self.current_user = current_user

    def create_bot(self, bot_data: TelegramBotCreate) -> TelegramBotModel:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ Telegram –±–æ—Ç–∞"""
        db_bot = TelegramBot(
            name=bot_data.name,
            bot_token=bot_data.bot_token,
            chat_id=bot_data.chat_id,
            notification_types=bot_data.notification_types,
            description=bot_data.description,
            is_active=bot_data.is_active,
            created_by=self.current_user.id,
        )

        self.db.add(db_bot)
        self.db.commit()
        self.db.refresh(db_bot)

        return TelegramBotModel.model_validate(db_bot)

    def get_bots(self, skip: int = 0, limit: int = 100) -> List[TelegramBotModel]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–æ—Ç–æ–≤"""
        bots = self.db.query(TelegramBot).offset(skip).limit(limit).all()
        return [TelegramBotModel.model_validate(bot) for bot in bots]

    def get_bot(self, bot_id: int) -> TelegramBotModel:
        """–ü–æ–ª—É—á–∞–µ—Ç –±–æ—Ç–∞ –ø–æ ID"""
        bot = self.db.query(TelegramBot).filter(TelegramBot.id == bot_id).first()
        if not bot:
            raise HTTPException(status_code=404, detail="–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return TelegramBotModel.model_validate(bot)

    def update_bot(self, bot_id: int, bot_data: TelegramBotUpdate) -> TelegramBotModel:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –±–æ—Ç–∞"""
        bot = self.db.query(TelegramBot).filter(TelegramBot.id == bot_id).first()
        if not bot:
            raise HTTPException(status_code=404, detail="–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

        update_data = bot_data.model_dump(exclude_unset=True)
        for field, value in update_data.items():
            setattr(bot, field, value)

        bot.updated_at = datetime.now(timezone.utc)
        self.db.commit()
        self.db.refresh(bot)

        return TelegramBotModel.model_validate(bot)

    def delete_bot(self, bot_id: int):
        """–£–¥–∞–ª—è–µ—Ç –±–æ—Ç–∞"""
        bot = self.db.query(TelegramBot).filter(TelegramBot.id == bot_id).first()
        if not bot:
            raise HTTPException(status_code=404, detail="–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

        self.db.delete(bot)
        self.db.commit()

    def activate_bot(self, bot_id: int) -> TelegramBotModel:
        """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –±–æ—Ç–∞"""
        bot = self.db.query(TelegramBot).filter(TelegramBot.id == bot_id).first()
        if not bot:
            raise HTTPException(status_code=404, detail="–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

        bot.is_active = True
        bot.updated_at = datetime.now(timezone.utc)
        self.db.commit()
        self.db.refresh(bot)

        return TelegramBotModel.model_validate(bot)

    def deactivate_bot(self, bot_id: int) -> TelegramBotModel:
        """–î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –±–æ—Ç–∞"""
        bot = self.db.query(TelegramBot).filter(TelegramBot.id == bot_id).first()
        if not bot:
            raise HTTPException(status_code=404, detail="–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

        bot.is_active = False
        bot.updated_at = datetime.now(timezone.utc)
        self.db.commit()
        self.db.refresh(bot)

        return TelegramBotModel.model_validate(bot)

    async def test_bot(self, bot_id: int, message: str) -> dict:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è"""
        bot = self.db.query(TelegramBot).filter(TelegramBot.id == bot_id).first()
        if not bot:
            raise HTTPException(status_code=404, detail="–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

        formatted_message = format_notification_message("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", message)
        success = await send_telegram_message(
            bot.bot_token, bot.chat_id, formatted_message
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        bot.last_test_message_at = datetime.now(timezone.utc)
        bot.test_message_status = "success" if success else "failed"
        self.db.commit()

        return {
            "success": success,
            "message": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
            if success
            else "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏",
        }

    async def send_notification(
        self, notification_data: SendNotificationRequest
    ) -> SendNotificationResponse:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —á–∞—Ç—ã"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –≤ Python
        # (PostgreSQL JSON –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –ø–æ-—Ä–∞–∑–Ω–æ–º—É –≤ —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ä—Å–∏—è—Ö)
        all_bots = (
            self.db.query(TelegramBot)
            .filter(TelegramBot.is_active == True)
            .all()
        )
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –±–æ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –¥–∞–Ω–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        bots = [
            bot for bot in all_bots
            if bot.notification_types and notification_data.notification_type in bot.notification_types
        ]

        if not bots:
            raise HTTPException(
                status_code=400,
                detail="–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
            )

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        title = notification_data.title or "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
        formatted_message = format_notification_message(
            title, notification_data.message, notification_data.priority
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        sent_count = 0
        failed_count = 0
        details = []

        for bot in bots:
            try:
                success = await send_telegram_message(
                    bot.bot_token, bot.chat_id, formatted_message
                )
                if success:
                    sent_count += 1
                else:
                    failed_count += 1

                details.append(
                    {
                        "bot_id": bot.id,
                        "bot_name": bot.name,
                        "status": "success" if success else "failed",
                        "error": None if success else "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏",
                    }
                )
            except Exception as e:
                failed_count += 1
                details.append(
                    {
                        "bot_id": bot.id,
                        "bot_name": bot.name,
                        "status": "failed",
                        "error": str(e),
                    }
                )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        bot_info = {
            "bot_ids": [bot.id for bot in bots],
            "bot_names": [bot.name for bot in bots],
            "details": details,
        }

        history = NotificationHistory(
            notification_type=notification_data.notification_type,
            message=notification_data.message,
            title=notification_data.title,
            priority=notification_data.priority,
            sent_to=sent_count,
            failed=failed_count,
            success=sent_count > 0,
            created_by=self.current_user.id,
            data={**(notification_data.data or {}), **bot_info},
        )
        self.db.add(history)
        self.db.commit()

        return SendNotificationResponse(
            success=sent_count > 0,
            sent_to=sent_count,
            failed=failed_count,
            details=details,
        )

    def get_notification_history(
        self, skip: int = 0, limit: int = 100
    ) -> List[NotificationHistoryModel]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        history = (
            self.db.query(NotificationHistory)
            .order_by(desc(NotificationHistory.sent_at))
            .offset(skip)
            .limit(limit)
            .all()
        )

        return [NotificationHistoryModel.model_validate(item) for item in history]

    def get_bot_stats(self) -> TelegramBotStats:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±–æ—Ç–∞–º"""
        total_bots = self.db.query(func.count(TelegramBot.id)).scalar()
        active_bots = (
            self.db.query(func.count(TelegramBot.id))
            .filter(TelegramBot.is_active == True)
            .scalar()
        )
        inactive_bots = total_bots - active_bots

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        bots_by_type = {}
        bots = self.db.query(TelegramBot).all()
        for bot in bots:
            for notification_type in bot.notification_types:
                bots_by_type[notification_type] = (
                    bots_by_type.get(notification_type, 0) + 1
                )

        # –°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ—Ç—ã (–ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏)
        bot_activity = {}
        history_records = (
            self.db.query(NotificationHistory)
            .filter(NotificationHistory.data.isnot(None))
            .all()
        )

        for record in history_records:
            if record.data and "bot_ids" in record.data:
                for bot_id in record.data["bot_ids"]:
                    bot_activity[bot_id] = bot_activity.get(bot_id, 0) + 1

        # –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–æ–≤ —Å –∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
        most_active_bots = []
        for bot_id, count in sorted(
            bot_activity.items(), key=lambda x: x[1], reverse=True
        )[:5]:
            bot = self.db.query(TelegramBot).filter(TelegramBot.id == bot_id).first()
            if bot:
                most_active_bots.append(
                    {"id": bot.id, "name": bot.name, "notifications_sent": count}
                )

        # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
        if not most_active_bots:
            recent_tested_bots = (
                self.db.query(TelegramBot)
                .filter(TelegramBot.last_test_message_at.isnot(None))
                .order_by(desc(TelegramBot.last_test_message_at))
                .limit(5)
                .all()
            )

            most_active_bots = [
                {"id": bot.id, "name": bot.name, "notifications_sent": 0}
                for bot in recent_tested_bots
            ]

        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        recent_messages = (
            self.db.query(NotificationHistory)
            .order_by(desc(NotificationHistory.sent_at))
            .limit(10)
            .all()
        )

        recent_messages_list = []
        for msg in recent_messages:
            bot_names = []
            if msg.data and "bot_names" in msg.data:
                bot_names = msg.data["bot_names"]

            recent_messages_list.append(
                {
                    "id": msg.id,
                    "bot_name": ", ".join(bot_names) if bot_names else "System",
                    "message_type": msg.notification_type,
                    "sent_at": msg.sent_at.isoformat(),
                    "status": "success" if msg.success else "failed",
                }
            )

        return TelegramBotStats(
            total_bots=total_bots,
            active_bots=active_bots,
            inactive_bots=inactive_bots,
            total_notifications_sent=self.db.query(
                func.count(NotificationHistory.id)
            ).scalar(),
            bots_by_type=bots_by_type,
            most_active_bots=most_active_bots,
            recent_messages=recent_messages_list,
        )

    def get_notification_stats(self) -> NotificationStats:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º"""
        total_notifications = self.db.query(func.count(NotificationHistory.id)).scalar()
        successful_notifications = (
            self.db.query(func.count(NotificationHistory.id))
            .filter(NotificationHistory.success == True)
            .scalar()
        )
        failed_notifications = total_notifications - successful_notifications
        active_bots = (
            self.db.query(func.count(TelegramBot.id))
            .filter(TelegramBot.is_active == True)
            .scalar()
        )

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        notifications_by_type = {}
        type_stats = (
            self.db.query(
                NotificationHistory.notification_type,
                func.count(NotificationHistory.id),
            )
            .group_by(NotificationHistory.notification_type)
            .all()
        )

        for notification_type, count in type_stats:
            notifications_by_type[notification_type] = count

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
        notifications_by_priority = {}
        priority_stats = (
            self.db.query(
                NotificationHistory.priority, func.count(NotificationHistory.id)
            )
            .group_by(NotificationHistory.priority)
            .all()
        )

        for priority, count in priority_stats:
            notifications_by_priority[priority] = count

        return NotificationStats(
            total_notifications_sent=total_notifications,
            successful_notifications=successful_notifications,
            failed_notifications=failed_notifications,
            active_bots=active_bots,
            notifications_by_type=notifications_by_type,
            notifications_by_priority=notifications_by_priority,
        )
