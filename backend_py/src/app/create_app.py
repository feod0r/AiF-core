import os
import sys

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.openapi.utils import get_openapi
from loguru import logger

from app.external.sqlalchemy.models import Base
from app.external.sqlalchemy.session import engine

from .api.accounts.views import router as account_router
from .api.api_tokens.views import router as api_tokens_router
from .api.audit.views import router as audit_router
from .api.auth.views import router as auth_router
from .api.counterparties.views import router as counterparty_router
from .api.documents.views import router as documents_router
from .api.info_cards.views import router as info_cards_router
from .api.inventory_movements.views import router as inventory_movement_router
from .api.item_categories.views import router as item_category_router
from .api.items.views import router as item_router
from .api.machine_stocks.views import router as machine_stock_router
from .api.machines.views import router as machine_router
from .api.monitoring.views import router as monitoring_router
from .api.owners.views import router as owner_router
from .api.phones.views import router as phone_router
from .api.reference_tables.views import router as reference_tables_router
from .api.rent.views import router as rent_router
from .api.reports.views import router as reports_router
from .api.scheduled_jobs.views import router as scheduled_jobs_router
from .api.telegram.views import router as telegram_router
from .api.terminal_operations.views import router as terminal_operations_router
from .api.terminals.views import router as terminal_router
from .api.transaction_categories.views import router as transaction_category_router
from .api.transactions.views import router as transaction_router
from .api.users.views import router as user_router
from .api.warehouse_stocks.views import router as warehouse_stock_router
from .api.warehouses.views import router as warehouse_router
from .app_status import status_router
from .middleware.audit import AuditMiddleware
from .middleware.auth import AuthMiddleware
from .middleware.temp_file_cleanup import TempFileCleanupMiddleware
from .services.scheduler import task_scheduler
from .settings import settings


def custom_openapi():
    if app.openapi_schema:
        return app.openapi_schema

    openapi_schema = get_openapi(
        title="Ant Admin API",
        version=os.getenv("APP_VERSION", default="DEV"),
        description="API –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∞–º–∏",
        routes=app.routes,
    )

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ö–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è JWT –∏ API —Ç–æ–∫–µ–Ω–æ–≤
    openapi_schema["components"]["securitySchemes"] = {
        "BearerAuth": {
            "type": "http",
            "scheme": "bearer",
            "bearerFormat": "JWT",
            "description": "JWT —Ç–æ–∫–µ–Ω –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞. –ü–æ–ª—É—á–∏—Ç–µ —á–µ—Ä–µ–∑ /api/auth/login",
        },
        "ApiTokenAuth": {
            "type": "apiKey",
            "in": "header",
            "name": "Authorization",
            "description": "‚ö†Ô∏è –í–ê–ñ–ù–û: –í–≤–µ–¥–∏—Ç–µ –ü–û–õ–ù–´–ô —Ç–æ–∫–µ–Ω —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º!\n\n–§–æ—Ä–º–∞—Ç: Token <–≤–∞—à_api_—Ç–æ–∫–µ–Ω>\n–ü—Ä–∏–º–µ—Ä: Token abc123def456...\n\n1. –°–æ–∑–¥–∞–π—Ç–µ —Ç–æ–∫–µ–Ω –≤ —Ä–∞–∑–¥–µ–ª–µ 'API –¢–æ–∫–µ–Ω—ã'\n2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω\n3. –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–µ—Ñ–∏–∫—Å 'Token ' –ø–µ—Ä–µ–¥ —Ç–æ–∫–µ–Ω–æ–º\n4. –í—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ –ø–æ–ª–µ –Ω–∏–∂–µ",
        },
    }

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∫–æ –≤—Å–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º, –∫—Ä–æ–º–µ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö
    excluded_paths = {
        "/api/auth/login",
        "/api/auth/register",
        "/api/docs",
        "/api/redoc",
        "/openapi.json",
        "/api/status",
    }

    # –ü—É—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    excluded_patterns = [
        "/api/documents/download/"  # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ç–æ–∫–µ–Ω—É
    ]

    for path, path_data in openapi_schema["paths"].items():
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø—É—Ç–∏
        if path in excluded_paths:
            continue

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Ç–∏ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
        is_excluded = False
        for pattern in excluded_patterns:
            if path.startswith(pattern):
                is_excluded = True
                break

        if is_excluded:
            continue

        for method, method_data in path_data.items():
            if method.upper() != "OPTIONS":  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º OPTIONS
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±–∞ —Ç–∏–ø–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (OR –ª–æ–≥–∏–∫–∞)
                method_data["security"] = [
                    {"BearerAuth": []},  # JWT —Ç–æ–∫–µ–Ω
                    {"ApiTokenAuth": []},  # API —Ç–æ–∫–µ–Ω
                ]

    app.openapi_schema = openapi_schema
    return app.openapi_schema


app = FastAPI(
    title="Ant Admin API",
    description="""
# API –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∞–º–∏

## –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –¥–≤–∞ —Ç–∏–ø–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:

### 1. JWT –¢–æ–∫–µ–Ω—ã (–¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞)
- –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ `/api/auth/login`
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ: `Authorization: Bearer <jwt_token>`
- –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –æ–≥—Ä–∞–Ω–∏—á–µ–Ω

### 2. API –¢–æ–∫–µ–Ω—ã (–¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞)
- –°–æ–∑–¥–∞–π—Ç–µ —Ç–æ–∫–µ–Ω –≤ —Ä–∞–∑–¥–µ–ª–µ "API –¢–æ–∫–µ–Ω—ã" –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ: `Authorization: Token <api_token>`
- –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è

## –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ Swagger UI

1. **–î–ª—è JWT —Ç–æ–∫–µ–Ω–æ–≤**: 
   - –ù–∞–∂–º–∏—Ç–µ "Authorize" –∏ –≤—ã–±–µ—Ä–∏—Ç–µ "BearerAuth"
   - –í–≤–µ–¥–∏—Ç–µ JWT —Ç–æ–∫–µ–Ω –ë–ï–ó –ø—Ä–µ—Ñ–∏–∫—Å–∞ "Bearer"

2. **–î–ª—è API —Ç–æ–∫–µ–Ω–æ–≤**:
   - –ù–∞–∂–º–∏—Ç–µ "Authorize" –∏ –≤—ã–±–µ—Ä–∏—Ç–µ "ApiTokenAuth"  
   - ‚ö†Ô∏è **–í–ê–ñ–ù–û**: –í–≤–µ–¥–∏—Ç–µ –ü–û–õ–ù–´–ô —Ç–æ–∫–µ–Ω –° –ø—Ä–µ—Ñ–∏–∫—Å–æ–º "Token "
   - –§–æ—Ä–º–∞—Ç: `Token –≤–∞—à_—Ç–æ–∫–µ–Ω_–∑–¥–µ—Å—å`
   - –ü—Ä–∏–º–µ—Ä: `Token 5pjfnF3d_EHGciAwwxhDj-xfE4_B4As-BReu5fR3-jM`
    """,
    docs_url="/api/docs",
    redoc_url="/api/redoc",
    version=os.getenv("APP_VERSION", default="DEV"),
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è Swagger
    openapi_tags=[
        {"name": "auth", "description": "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"},
        {"name": "users", "description": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"},
        {"name": "machines", "description": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∞–º–∏"},
        {"name": "reports", "description": "–û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"},
        {"name": "api_tokens", "description": "üîë API —Ç–æ–∫–µ–Ω—ã –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"},
        {"name": "documents", "description": "üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏"},
        {"name": "audit", "description": "üìã –ê—É–¥–∏—Ç –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"},
    ],
)

# –î–æ–±–∞–≤–ª—è–µ–º CORS middleware
from app.settings import settings

# –ü–∞—Ä—Å–∏–º CORS origins –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
cors_origins = [origin.strip() for origin in settings.cors_origins.split(",")]

app.add_middleware(
    CORSMiddleware,
    allow_origins=cors_origins,  # –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    allow_credentials=True,  # –†–∞–∑—Ä–µ—à–∞–µ–º –ø–µ—Ä–µ–¥–∞—á—É cookies –∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    allow_methods=[
        "GET",
        "POST",
        "PUT",
        "DELETE",
        "OPTIONS",
        "PATCH",
    ],  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥—ã
    allow_headers=[
        "Authorization",
        "Content-Type",
        "Accept",
        "Origin",
        "X-Requested-With",
        "Access-Control-Allow-Origin",
        "Access-Control-Allow-Headers",
        "Access-Control-Allow-Methods",
    ],  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
)

# –î–æ–±–∞–≤–ª—è–µ–º Authentication middleware
app.add_middleware(
    AuthMiddleware,
    excluded_paths=[
        "/api/auth/login",
        "/api/auth/register",
        "/api/docs",
        "/api/redoc",
        "/openapi.json",
        "/api/status",
    ],
)

# –î–æ–±–∞–≤–ª—è–µ–º Audit middleware (–ø–æ—Å–ª–µ Authentication, —á—Ç–æ–±—ã –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫ user_id)
app.add_middleware(
    AuditMiddleware,
    excluded_paths=[
        "/api/docs",
        "/api/redoc",
        "/openapi.json",
        "/api/status",
        "/api/audit/logs",  # –ò–∑–±–µ–≥–∞–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        "/api/audit/stats",
        "/api/audit/actions",
        "/api/audit/tables",
        "/api/documents/download/",  # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø–æ —Ç–æ–∫–µ–Ω—É
    ],
    log_get_requests=False,  # –ù–µ –ª–æ–≥–∏—Ä—É–µ–º GET –∑–∞–ø—Ä–æ—Å—ã (—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —à—É–º–∞)
    log_request_body=True,  # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
    max_body_size=1024 * 5,  # 5KB –ª–∏–º–∏—Ç
)

# –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
app.add_middleware(TempFileCleanupMiddleware)


def create_tables():
    try:
        Base.metadata.create_all(engine)
        logger.info("All tables checked/created successfully.")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        init_database()

    except Exception as e:
        logger.error(f"Table creation failed: {e}")
        raise


def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    try:
        from sqlalchemy.orm import Session

        from app.api.auth.jwt import get_password_hash
        from app.external.sqlalchemy.models import (
            AccountType,
            CounterpartyCategory,
            InventoryCountStatus,
            ItemCategoryType,
            Owner,
            PurchaseOrderStatus,
            Rent,
            Role,
            Terminal,
            TransactionType,
            User,
        )
        from app.external.sqlalchemy.session import get_db

        db = next(get_db())

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
        existing_roles = db.query(Role).count()
        if existing_roles > 0:
            logger.info("Database already contains data. Initialization skipped.")
            return

        logger.info("Initializing database with default data...")

        # –°–æ–∑–¥–∞–µ–º —Ä–æ–ª–∏
        roles = [
            Role(name="admin", description="–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ", is_active=True),
            Role(name="user", description="–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", is_active=True),
            Role(name="readonly", description="–¢–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ", is_active=True),
        ]

        for role in roles:
            db.add(role)
        db.commit()
        db.add(Owner(name="–ò–ü –¢—Ä—É–±–Ω–∏–∫ –ê.–î.", inn=123456))
        db.add(Owner(name="–ò–ü –î—É–¥–∫–∞ –§.–ê.", inn=654321))
        db.add(
            Terminal(
                terminal=123456,
                name="–í–µ–Ω–¥–∏—Å—Ç–∞ 3",
                owner_id=1,
            )
        )
        db.add(
            Rent(
                pay_date=5,
                location="–∫–æ—Ä–∞–±–ª–∏–∫",
                amount=15000,
                details="–ö—É–¥–∞ –ø–ª–∞—Ç–∏—Ç—å –∏ —Ä–µ–∫–≤–µ–∑–∏—Ç—ã",
                payer_id=1,
            )
        )
        db.commit()
        # –ü–æ–ª—É—á–∞–µ–º ID —Ä–æ–ª–µ–π
        admin_role = db.query(Role).filter(Role.name == "admin").first()
        user_role = db.query(Role).filter(Role.name == "user").first()
        readonly_role = db.query(Role).filter(Role.name == "readonly").first()

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        users = [
            User(
                username="admin",
                password_hash=get_password_hash("admin123"),
                email="admin@example.com",
                full_name="–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                role_id=admin_role.id,
                is_active=True,
            ),
            User(
                username="user",
                password_hash=get_password_hash("user123"),
                email="user@example.com",
                full_name="–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                role_id=user_role.id,
                is_active=True,
            ),
            User(
                username="readonly",
                password_hash=get_password_hash("readonly123"),
                email="readonly@example.com",
                full_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è",
                role_id=readonly_role.id,
                is_active=True,
            ),
        ]

        for user in users:
            db.add(user)

        # –°–æ–∑–¥–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        account_types = [
            AccountType(name="–†–∞—Å—á–µ—Ç–Ω—ã–π —Å—á–µ—Ç", description="–û—Å–Ω–æ–≤–Ω–æ–π —Ä–∞—Å—á–µ—Ç–Ω—ã–π —Å—á–µ—Ç"),
            AccountType(name="–ö–∞—Å—Å–∞", description="–ù–∞–ª–∏—á–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞"),
            AccountType(name="–í–∞–ª—é—Ç–Ω—ã–π —Å—á–µ—Ç", description="–°—á–µ—Ç –≤ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç–µ"),
            AccountType(name="–î–µ–ø–æ–∑–∏—Ç", description="–î–µ–ø–æ–∑–∏—Ç–Ω—ã–π —Å—á–µ—Ç"),
        ]

        transaction_types = [
            TransactionType(name="income", description="–î–æ—Ö–æ–¥"),
            TransactionType(name="expense", description="–†–∞—Å—Ö–æ–¥"),
            TransactionType(name="transfer", description="–ü–µ—Ä–µ–≤–æ–¥"),
        ]

        inventory_statuses = [
            InventoryCountStatus(name="draft", description="–ß–µ—Ä–Ω–æ–≤–∏–∫"),
            InventoryCountStatus(name="approved", description="–£—Ç–≤–µ—Ä–∂–¥–µ–Ω"),
            InventoryCountStatus(name="executed", description="–í—ã–ø–æ–ª–Ω–µ–Ω"),
            InventoryCountStatus(name="cancelled", description="–û—Ç–º–µ–Ω–µ–Ω"),
        ]

        order_statuses = [
            PurchaseOrderStatus(name="draft", description="–ß–µ—Ä–Ω–æ–≤–∏–∫"),
            PurchaseOrderStatus(name="sent", description="–û—Ç–ø—Ä–∞–≤–ª–µ–Ω"),
            PurchaseOrderStatus(name="confirmed", description="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"),
            PurchaseOrderStatus(name="received", description="–ü–æ–ª—É—á–µ–Ω"),
            PurchaseOrderStatus(name="cancelled", description="–û—Ç–º–µ–Ω–µ–Ω"),
        ]

        item_category_types = [
            ItemCategoryType(name="inventory", description="–¢–æ–≤–∞—Ä–Ω—ã–µ –∑–∞–ø–∞—Å—ã"),
            ItemCategoryType(name="equipment", description="–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"),
            ItemCategoryType(name="consumables", description="–†–∞—Å—Ö–æ–¥–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã"),
        ]

        counterparty_categories = [
            CounterpartyCategory(
                name="–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏", description="–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥"
            ),
            CounterpartyCategory(name="–ö–ª–∏–µ–Ω—Ç—ã", description="–ü–æ–∫—É–ø–∞—Ç–µ–ª–∏ –∏ –∑–∞–∫–∞–∑—á–∏–∫–∏"),
            CounterpartyCategory(name="–ë–∞–Ω–∫–∏", description="–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"),
            CounterpartyCategory(
                name="–ì–æ—Å—É—á—Ä–µ–∂–¥–µ–Ω–∏—è", description="–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è"
            ),
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        for item in (
            account_types
            + transaction_types
            + inventory_statuses
            + order_statuses
            + item_category_types
            + counterparty_categories
        ):
            db.add(item)

        db.commit()
        logger.info("Database initialized successfully with default data.")

    except Exception as e:
        logger.error(f"Database initialization failed: {e}")
        raise
    finally:
        db.close()


async def start_scheduler():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á"""
    await task_scheduler.start()
    logger.info("Task scheduler started")


async def shutdown_scheduler():
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á"""
    await task_scheduler.shutdown()
    logger.info("Task scheduler stopped")


def create_app():
    logger.configure(
        handlers=[
            {
                "sink": sys.stdout,
                "level": settings.log_level,
                "format": "<level>{level}: {message}</level>",
            }
        ]
    )

    app.add_event_handler("startup", create_tables)
    app.add_event_handler("startup", start_scheduler)
    app.add_event_handler("shutdown", shutdown_scheduler)
    app.include_router(status_router)
    app.include_router(auth_router, prefix="/api/auth", tags=["auth"])
    app.include_router(user_router, prefix="/api", tags=["users"])
    app.include_router(owner_router, prefix="/api", tags=["owners"])
    app.include_router(terminal_router, prefix="/api", tags=["terminals"])
    app.include_router(machine_router, prefix="/api", tags=["machines"])
    app.include_router(monitoring_router, prefix="/api", tags=["monitoring"])
    app.include_router(rent_router, prefix="/api", tags=["rent"])
    app.include_router(phone_router, prefix="/api", tags=["phones"])
    app.include_router(counterparty_router, prefix="/api", tags=["counterparties"])
    app.include_router(
        transaction_category_router, prefix="/api", tags=["transaction-categories"]
    )
    app.include_router(transaction_router, prefix="/api", tags=["transactions"])
    app.include_router(account_router, prefix="/api", tags=["accounts"])
    app.include_router(item_category_router, prefix="/api", tags=["item-categories"])
    app.include_router(warehouse_router, prefix="/api", tags=["warehouses"])
    app.include_router(item_router, prefix="/api", tags=["items"])
    app.include_router(warehouse_stock_router, prefix="/api", tags=["warehouse-stocks"])
    app.include_router(machine_stock_router, prefix="/api", tags=["machine-stocks"])
    app.include_router(
        inventory_movement_router, prefix="/api", tags=["inventory-movements"]
    )
    app.include_router(
        reference_tables_router, prefix="/api", tags=["reference-tables"]
    )
    app.include_router(reports_router, prefix="/api", tags=["reports"])
    app.include_router(info_cards_router, prefix="/api", tags=["info-cards"])
    app.include_router(terminal_operations_router)
    app.include_router(documents_router, prefix="/api", tags=["documents"])
    app.include_router(audit_router, prefix="/api", tags=["audit"])
    app.include_router(api_tokens_router, prefix="/api", tags=["api_tokens"])
    app.include_router(telegram_router, prefix="/api", tags=["telegram"])
    app.include_router(
        scheduled_jobs_router, prefix="/api/scheduled", tags=["scheduled-jobs"]
    )

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–π OpenAPI —Å—Ö–µ–º—ã –¥–ª—è Swagger
    app.openapi = custom_openapi

    return app
