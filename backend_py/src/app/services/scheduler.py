"""
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ä—É—Ç–∏–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
"""
import asyncio
from datetime import datetime, timezone
from typing import Optional

import httpx
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from apscheduler.triggers.interval import IntervalTrigger
from loguru import logger
from sqlalchemy.orm import Session

from app.external.sqlalchemy.models import ScheduledJob, Phone, Rent, MachineStock, TelegramBot
from app.external.sqlalchemy.session import get_db
from app.api.telegram.controllers import send_notification_system


class TaskScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
    
    def __init__(self):
        self.scheduler = AsyncIOScheduler(timezone='Europe/Moscow')
        self._http_client: Optional[httpx.AsyncClient] = None
        
    async def get_http_client(self) -> httpx.AsyncClient:
        """–ü–æ–ª—É—á–∏—Ç—å HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if self._http_client is None:
            self._http_client = httpx.AsyncClient(timeout=30.0)
        return self._http_client
        
    async def start(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        await self._add_built_in_jobs()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await self._load_jobs_from_db()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        self.scheduler.start()
        logger.info("Task scheduler started successfully")
        
    async def shutdown(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        self.scheduler.shutdown()
        if self._http_client:
            await self._http_client.aclose()
        logger.info("Task scheduler stopped")
        
    async def _add_built_in_jobs(self):
        """–î–æ–±–∞–≤–∏—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
        # –°–æ–∑–¥–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ –ë–î, –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
        await self._create_builtin_jobs_in_db()
        
        logger.info("Built-in scheduled jobs added")
        
    async def _create_builtin_jobs_in_db(self):
        """–°–æ–∑–¥–∞—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            db = next(get_db())
            
            # –°–ø–∏—Å–æ–∫ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
            builtin_jobs = [
                {
                    'name': 'üîî –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ (–≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è)',
                    'description': '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ–ø–ª–∞—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 06:00',
                    'job_type': 'cron',
                    'cron_expression': '0 6 * * *',
                    'function_path': 'app.services.scheduler:_check_phone_payments_wrapper',
                    'function_params': {},
                },
                {
                    'name': 'üîî –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã –∞—Ä–µ–Ω–¥—ã (–≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è)',
                    'description': '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ–ø–ª–∞—Ç–µ –∞—Ä–µ–Ω–¥—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 06:00',
                    'job_type': 'cron',
                    'cron_expression': '0 6 * * *',
                    'function_path': 'app.services.scheduler:_check_rent_payments_wrapper',
                    'function_params': {},
                },
                {
                    'name': 'üîî –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∏–∑–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ (–≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è)',
                    'description': '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∏–∑–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏–≥—Ä—É—à–µ–∫ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 06:00',
                    'job_type': 'cron',
                    'cron_expression': '0 6 * * *',
                    'function_path': 'app.services.scheduler:_check_low_stock_wrapper',
                    'function_params': {},
                },
            ]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏
            for job_data in builtin_jobs:
                existing = db.query(ScheduledJob).filter(
                    ScheduledJob.name == job_data['name']
                ).first()
                
                if not existing:
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —Å ID —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (1)
                    job = ScheduledJob(
                        **job_data,
                        created_by=1,  # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                        is_active=True,
                        created_at=datetime.now(timezone.utc),
                        updated_at=datetime.now(timezone.utc)
                    )
                    db.add(job)
                    logger.info(f"Created built-in job: {job_data['name']}")
            
            db.commit()
            db.close()
            
        except Exception as e:
            logger.error(f"Error creating built-in jobs in DB: {e}")
            if db:
                db.close()
        
    async def _check_phone_payments(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        logger.info("Running phone payments check...")
        
        try:
            db = next(get_db())
            current_day = datetime.now(timezone.utc).day
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã —Å —Ç–µ–∫—É—â–∏–º –¥–Ω–µ–º –æ–ø–ª–∞—Ç—ã
            phones = db.query(Phone).filter(
                Phone.pay_date == current_day,
                Phone.end_date > datetime.now(timezone.utc)
            ).all()
            
            if not phones:
                logger.info(f"No phone payments due on day {current_day}")
                return
                
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_lines = [
                f"üí≥ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤</b>",
                f"",
                f"–°–µ–≥–æ–¥–Ω—è ({current_day} —á–∏—Å–ª–æ) –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã:",
                ""
            ]
            
            total_amount = 0
            for phone in phones:
                message_lines.append(
                    f"üì± {phone.phone}: <b>{phone.amount} ‚ÇΩ</b>"
                )
                if phone.details:
                    message_lines.append(f"   ‚îî {phone.details}")
                total_amount += float(phone.amount)
                
            message_lines.append("")
            message_lines.append(f"üí∞ <b>–ò—Ç–æ–≥–æ: {total_amount:.2f} ‚ÇΩ</b>")
            
            message = "\n".join(message_lines)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram
            await self._send_telegram_notification(
                db=db,
                notification_type="payment_due_phone",
                title="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤",
                message=message,
                priority="high"
            )
            
            logger.info(f"Phone payment notifications sent for {len(phones)} phones")
            
        except Exception as e:
            logger.error(f"Error checking phone payments: {e}")
        finally:
            db.close()
            
    async def _check_rent_payments(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É –∞—Ä–µ–Ω–¥—ã –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        logger.info("Running rent payments check...")
        
        try:
            db = next(get_db())
            current_day = datetime.now(timezone.utc).day
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã —Å —Ç–µ–∫—É—â–∏–º –¥–Ω–µ–º –æ–ø–ª–∞—Ç—ã
            rents = db.query(Rent).filter(
                Rent.pay_date == current_day,
                Rent.end_date > datetime.now(timezone.utc)
            ).all()
            
            if not rents:
                logger.info(f"No rent payments due on day {current_day}")
                return
                
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_lines = [
                f"üè† <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ –∞—Ä–µ–Ω–¥—ã</b>",
                f"",
                f"–°–µ–≥–æ–¥–Ω—è ({current_day} —á–∏—Å–ª–æ) –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –∞—Ä–µ–Ω–¥—É:",
                ""
            ]
            
            total_amount = 0
            for rent in rents:
                payer_info = f" ({rent.payer.name})" if rent.payer else ""
                message_lines.append(
                    f"üìç {rent.location}{payer_info}: <b>{rent.amount} ‚ÇΩ</b>"
                )
                if rent.details:
                    message_lines.append(f"   ‚îî {rent.details}")
                total_amount += float(rent.amount)
                
            message_lines.append("")
            message_lines.append(f"üí∞ <b>–ò—Ç–æ–≥–æ: {total_amount:.2f} ‚ÇΩ</b>")
            
            message = "\n".join(message_lines)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram
            await self._send_telegram_notification(
                db=db,
                notification_type="payment_due_rent",
                title="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ –∞—Ä–µ–Ω–¥—ã",
                message=message,
                priority="high"
            )
            
            logger.info(f"Rent payment notifications sent for {len(rents)} locations")
            
        except Exception as e:
            logger.error(f"Error checking rent payments: {e}")
        finally:
            db.close()
            
    async def _check_low_stock(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∏–∑–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ –∏–≥—Ä—É—à–µ–∫ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        logger.info("Running low stock check...")
        
        try:
            db = next(get_db())
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞—Ç–∫–∏ —Å–æ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏
            all_stocks = db.query(MachineStock).join(MachineStock.item).all()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –≤—Ä—É—á–Ω—É—é, —É—á–∏—Ç—ã–≤–∞—è min_quantity –∏–∑ machine_stocks 
            # –∏–ª–∏ min_stock –∏–∑ items, –µ—Å–ª–∏ min_quantity –Ω–µ –∑–∞–¥–∞–Ω
            low_stocks = []      # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏
            warning_stocks = []  # –ë–ª–∏–∑–∫–∏–µ –∫ –º–∏–Ω–∏–º—É–º—É (–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ)
            
            for stock in all_stocks:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º min_quantity –∏–∑ machine_stocks, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω (> 0),
                # –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º min_stock –∏–∑ items
                min_threshold = stock.min_quantity if stock.min_quantity > 0 else (stock.item.min_stock if stock.item else 0)
                
                if min_threshold <= 0:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–≤–∞—Ä—ã –±–µ–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞
                    continue
                
                # –ü—Ä–∏–≤–æ–¥–∏–º –∫ float –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
                min_threshold_float = float(min_threshold)
                quantity_float = float(stock.quantity)
                
                # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫
                if quantity_float <= min_threshold_float:
                    low_stocks.append(stock)
                # –ë–ª–∏–∑–∫–æ –∫ –º–∏–Ω–∏–º—É–º—É (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 20% –æ—Ç –º–∏–Ω–∏–º—É–º–∞)
                elif quantity_float <= min_threshold_float * 1.2:
                    warning_stocks.append(stock)
            
            if not low_stocks and not warning_stocks:
                logger.info("No low stock items found")
                return
                
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ –∞–≤—Ç–æ–º–∞—Ç–∞–º
            critical_machines = {}
            for stock in low_stocks:
                machine_id = stock.machine_id
                if machine_id not in critical_machines:
                    critical_machines[machine_id] = {
                        'machine': stock.machine,
                        'items': []
                    }
                critical_machines[machine_id]['items'].append(stock)
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ –∞–≤—Ç–æ–º–∞—Ç–∞–º
            warning_machines = {}
            for stock in warning_stocks:
                machine_id = stock.machine_id
                if machine_id not in warning_machines:
                    warning_machines[machine_id] = {
                        'machine': stock.machine,
                        'items': []
                    }
                warning_machines[machine_id]['items'].append(stock)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_lines = []
            
            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏
            if critical_machines:
                message_lines.extend([
                    f"üî¥ <b>–ö–†–ò–¢–ò–ß–ï–°–ö–ò –ù–ò–ó–ö–ò–ï –û–°–¢–ê–¢–ö–ò</b>",
                    f"",
                    f"–í —Å–ª–µ–¥—É—é—â–∏—Ö –∞–≤—Ç–æ–º–∞—Ç–∞—Ö –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –∏–≥—Ä—É—à–∫–∏:",
                    ""
                ])
                
                critical_items = 0
                for machine_id, data in critical_machines.items():
                    machine = data['machine']
                    items = data['items']
                    
                    machine_name = machine.name if machine else f"–ê–≤—Ç–æ–º–∞—Ç #{machine_id}"
                    message_lines.append(f"üé∞ <b>{machine_name}</b>")
                    
                    for stock in items:
                        item_name = stock.item.name if stock.item else f"–¢–æ–≤–∞—Ä #{stock.item_id}"
                        quantity = float(stock.quantity)
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
                        min_qty = float(stock.min_quantity) if stock.min_quantity > 0 else float(stock.item.min_stock if stock.item else 0)
                        min_source = "–∞–≤—Ç–æ–º–∞—Ç" if stock.min_quantity > 0 else "—Ç–æ–≤–∞—Ä"
                        
                        message_lines.append(
                            f"   üß∏ {item_name}: <b>{quantity}</b> —à—Ç. (–º–∏–Ω: {min_qty}, –∏—Å—Ç–æ—á–Ω–∏–∫: {min_source})"
                        )
                        critical_items += 1
                    
                    message_lines.append("")
                
                message_lines.extend([
                    f"üìä <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∑–∏—Ü–∏–π: {critical_items}</b>",
                    f"üè™ <b>–ê–≤—Ç–æ–º–∞—Ç–æ–≤ —Ç—Ä–µ–±—É–µ—Ç —Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {len(critical_machines)}</b>",
                    ""
                ])
            
            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –±–ª–∏–∑–∫–∏—Ö –∫ –º–∏–Ω–∏–º—É–º—É –æ—Å—Ç–∞—Ç–∫–∞—Ö
            if warning_machines:
                if critical_machines:
                    message_lines.append("üü° <b>–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø</b>")
                else:
                    message_lines.extend([
                        f"üü° <b>–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø –û –ù–ò–ó–ö–ò–• –û–°–¢–ê–¢–ö–ê–•</b>",
                        f"",
                        f"–í —Å–ª–µ–¥—É—é—â–∏—Ö –∞–≤—Ç–æ–º–∞—Ç–∞—Ö –æ—Å—Ç–∞—Ç–∫–∏ –±–ª–∏–∑–∫–∏ –∫ –º–∏–Ω–∏–º—É–º—É:",
                        ""
                    ])
                
                warning_items = 0
                for machine_id, data in warning_machines.items():
                    machine = data['machine']
                    items = data['items']
                    
                    machine_name = machine.name if machine else f"–ê–≤—Ç–æ–º–∞—Ç #{machine_id}"
                    message_lines.append(f"üé∞ <b>{machine_name}</b>")
                    
                    for stock in items:
                        item_name = stock.item.name if stock.item else f"–¢–æ–≤–∞—Ä #{stock.item_id}"
                        quantity = float(stock.quantity)
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
                        min_qty = float(stock.min_quantity) if stock.min_quantity > 0 else float(stock.item.min_stock if stock.item else 0)
                        min_source = "–∞–≤—Ç–æ–º–∞—Ç" if stock.min_quantity > 0 else "—Ç–æ–≤–∞—Ä"
                        
                        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –º–∏–Ω–∏–º—É–º–∞
                        percentage = (quantity / min_qty * 100) if min_qty > 0 else 0
                        
                        message_lines.append(
                            f"   üß∏ {item_name}: <b>{quantity}</b> —à—Ç. (–º–∏–Ω: {min_qty}, {percentage:.0f}%, –∏—Å—Ç–æ—á–Ω–∏–∫: {min_source})"
                        )
                        warning_items += 1
                    
                    message_lines.append("")
                
                message_lines.extend([
                    f"üìä <b>–ü–æ–∑–∏—Ü–∏–π —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º: {warning_items}</b>",
                    f"üè™ <b>–ê–≤—Ç–æ–º–∞—Ç–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–ø–æ–ª–Ω–∏—Ç—å: {len(warning_machines)}</b>"
                ])
            
            message = "\n".join(message_lines)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram
            await self._send_telegram_notification(
                db=db,
                notification_type="low_stock",
                title="–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö",
                message=message,
                priority="high"
            )
            
            total_critical = sum(len(data['items']) for data in critical_machines.values())
            total_warnings = sum(len(data['items']) for data in warning_machines.values())
            
            logger.info(
                f"Low stock notifications sent: {total_critical} critical items in {len(critical_machines)} machines, "
                f"{total_warnings} warning items in {len(warning_machines)} machines"
            )
            
        except Exception as e:
            logger.error(f"Error checking low stock: {e}")
        finally:
            db.close()
            
    async def _send_telegram_notification(
        self, 
        db: Session, 
        notification_type: str,
        title: str,
        message: str,
        priority: str = "medium"
    ):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram —á–µ—Ä–µ–∑ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ API"""
        try:
            result = await send_notification_system(
                db=db,
                notification_type=notification_type,
                message=message,
                title=title,
                priority=priority,
                created_by_id=1  # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            )
            
            if result['success']:
                logger.info(
                    f"Notification sent: type={notification_type}, "
                    f"sent_to={result['sent_to']}, failed={result['failed']}"
                )
            else:
                logger.warning(f"Notification not sent: {result.get('message', 'Unknown error')}")
                
        except Exception as e:
            logger.error(f"Error sending notification: {e}")
                
    async def _load_jobs_from_db(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            db = next(get_db())
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
            jobs = db.query(ScheduledJob).filter(ScheduledJob.is_active == True).all()
            
            for job in jobs:
                try:
                    await self._add_job_from_model(job)
                    logger.info(f"Loaded scheduled job: {job.name}")
                except Exception as e:
                    logger.error(f"Error loading job {job.name}: {e}")
                    
            db.close()
            
        except Exception as e:
            logger.error(f"Error loading jobs from database: {e}")
            
    async def _add_job_from_model(self, job: ScheduledJob):
        """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –∏–∑ –º–æ–¥–µ–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º trigger –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
        trigger = None
        
        if job.job_type == 'cron' and job.cron_expression:
            # –ü–∞—Ä—Å–∏–º cron –≤—ã—Ä–∞–∂–µ–Ω–∏–µ (—Ñ–æ—Ä–º–∞—Ç: –º–∏–Ω—É—Ç–∞ —á–∞—Å –¥–µ–Ω—å –º–µ—Å—è—Ü –¥–µ–Ω—å_–Ω–µ–¥–µ–ª–∏)
            parts = job.cron_expression.split()
            if len(parts) == 5:
                trigger = CronTrigger(
                    minute=parts[0],
                    hour=parts[1],
                    day=parts[2],
                    month=parts[3],
                    day_of_week=parts[4]
                )
        elif job.job_type == 'interval' and job.interval_seconds:
            trigger = IntervalTrigger(seconds=job.interval_seconds)
        elif job.job_type == 'date' and job.scheduled_time:
            # –î–ª—è –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã—Ö –∑–∞–¥–∞—á –∏—Å–ø–æ–ª—å–∑—É–µ–º date trigger
            from apscheduler.triggers.date import DateTrigger
            trigger = DateTrigger(run_date=job.scheduled_time)
            
        if trigger:
            self.scheduler.add_job(
                self._execute_job,
                trigger,
                args=[job.id],
                id=f"job_{job.id}",
                name=job.name,
                replace_existing=True
            )
            
    async def _execute_job(self, job_id: int):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏"""
        logger.info(f"Executing job {job_id}...")
        
        db = None
        try:
            db = next(get_db())
            job = db.query(ScheduledJob).filter(ScheduledJob.id == job_id).first()
            
            if not job or not job.is_active:
                logger.warning(f"Job {job_id} not found or inactive")
                return
                
            # –ü–∞—Ä—Å–∏–º –ø—É—Ç—å –∫ —Ñ—É–Ω–∫—Ü–∏–∏ (—Ñ–æ—Ä–º–∞—Ç: module.path:function_name)
            try:
                module_path, function_name = job.function_path.split(':')
            except ValueError:
                raise ValueError(f"Invalid function_path format. Expected 'module.path:function_name', got '{job.function_path}'")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –∏ –ø–æ–ª—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            try:
                import importlib
                module = importlib.import_module(module_path)
                func = getattr(module, function_name)
            except (ImportError, AttributeError) as e:
                raise ImportError(f"Cannot import {function_name} from {module_path}: {e}")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            params = job.function_params or {}
            
            # –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã "today" –Ω–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
            def replace_today(obj):
                from datetime import date as date_type
                if isinstance(obj, dict):
                    return {k: replace_today(v) for k, v in obj.items()}
                elif isinstance(obj, list):
                    return [replace_today(item) for item in obj]
                elif obj == "today":
                    return date_type.today()
                return obj
            
            params = replace_today(params)
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è close_data - –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—ä–µ–∫—Ç CloseDayRequest
            if 'close_data' in params and isinstance(params['close_data'], dict):
                from app.api.terminal_operations.models import CloseDayRequest
                close_data_dict = params['close_data']
                params['close_data'] = CloseDayRequest(**close_data_dict)
                
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è sync_data - –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—ä–µ–∫—Ç VendistaSyncRequest
            if 'sync_data' in params and isinstance(params['sync_data'], dict):
                from app.api.terminal_operations.models import VendistaSyncRequest
                sync_data_dict = params['sync_data']
                params['sync_data'] = VendistaSyncRequest(**sync_data_dict)
                
            # –î–æ–±–∞–≤–ª—è–µ–º db –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –µ—ë —Ç—Ä–µ–±—É–µ—Ç
            import inspect
            sig = inspect.signature(func)
            if 'db' in sig.parameters:
                params['db'] = db
                
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            try:
                if inspect.iscoroutinefunction(func):
                    result = await func(**params)
                else:
                    result = func(**params)
                    
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–¥–∞—á–∏
                job.last_run = datetime.now(timezone.utc)
                job.run_count += 1
                job.last_error = None
                
                logger.info(f"Job {job_id} ({job.name}) completed successfully. Result: {result}")
                    
            except Exception as e:
                job.error_count += 1
                job.last_error = str(e)[:500]
                logger.error(f"Job {job_id} ({job.name}) failed with exception: {e}")
                import traceback
                logger.error(traceback.format_exc())
                
            db.commit()
            
        except Exception as e:
            logger.error(f"Error executing job {job_id}: {e}")
            import traceback
            logger.error(traceback.format_exc())
        finally:
            if db:
                db.close()
            
    async def reload_jobs(self):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ (–∫—Ä–æ–º–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö)
        for job in self.scheduler.get_jobs():
            if job.id.startswith('job_'):
                job.remove()
                
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –∑–∞–Ω–æ–≤–æ
        await self._load_jobs_from_db()
        logger.info("Scheduled jobs reloaded")
        
    async def add_or_update_job(self, job_id: int):
        """–î–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É"""
        try:
            db = next(get_db())
            job = db.query(ScheduledJob).filter(ScheduledJob.id == job_id).first()
            
            if not job:
                logger.warning(f"Job {job_id} not found")
                return
                
            # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É
            if self.scheduler.get_job(f"job_{job_id}"):
                self.scheduler.remove_job(f"job_{job_id}")
                
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –∑–∞–Ω–æ–≤–æ, –µ—Å–ª–∏ –æ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞
            if job.is_active:
                await self._add_job_from_model(job)
                logger.info(f"Job {job_id} added/updated successfully")
            else:
                logger.info(f"Job {job_id} is inactive, not adding to scheduler")
                
            db.close()
            
        except Exception as e:
            logger.error(f"Error adding/updating job {job_id}: {e}")
            
    async def remove_job(self, job_id: int):
        """–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        try:
            if self.scheduler.get_job(f"job_{job_id}"):
                self.scheduler.remove_job(f"job_{job_id}")
                logger.info(f"Job {job_id} removed from scheduler")
        except Exception as e:
            logger.error(f"Error removing job {job_id}: {e}")
            
    def get_all_jobs_info(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –∑–∞–¥–∞—á–∞—Ö –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ"""
        jobs_info = []
        
        for job in self.scheduler.get_jobs():
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–¥–∞—á–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π
            is_builtin = not job.id.startswith('job_')
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ
            next_run_time = job.next_run_time
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
            job_info = {
                'id': job.id,
                'name': job.name,
                'next_run': next_run_time.isoformat() if next_run_time else None,
                'is_builtin': is_builtin,
                'trigger': str(job.trigger),
            }
            
            jobs_info.append(job_info)
            
        return jobs_info


# Wrapper —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á (—á—Ç–æ–±—ã –∏—Ö –º–æ–∂–Ω–æ –±—ã–ª–æ –≤—ã–∑–≤–∞—Ç—å –∏–∑–≤–Ω–µ)
async def _check_phone_payments_wrapper():
    """Wrapper –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤"""
    await task_scheduler._check_phone_payments()


async def _check_rent_payments_wrapper():
    """Wrapper –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã –∞—Ä–µ–Ω–¥—ã"""
    await task_scheduler._check_rent_payments()


async def _check_low_stock_wrapper():
    """Wrapper –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∏–∑–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤"""
    await task_scheduler._check_low_stock()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
task_scheduler = TaskScheduler()

